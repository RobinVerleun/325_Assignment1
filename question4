#| Question 4

Parameters:
	L: A list to be split into two sublists.

Splits the elements of L into two lists (L1 L2), by putting elements of L
into L1 and L2 alternatingly.

Split acts as a parameter accumulation for split_aggregate.

test cases:
(split '(1 4 2 5 3 6)) => ((1 2 3) (4 5 6))
(split '()) => (nil nil)
(split '(1 (3 4) 2)) => ((1 2) ((3 4)))
#|

(defun split(L)
	(split_aggregate nil nil L)
)


#|
Split aggregate acts as the backbone for the split function. It contains all
the logic, using two empty lists (denoted as E1 and E2) for the function to 
divide list L into.
|#

(defun split_aggregate (E1 E2 L)
	(cond
		((null L) 
			(list E1 E2))
		((null (cdr L))
			(split_aggregate (append E1 (list (car L))) E2 (cddr L)))
		(t
			(split_aggregate (append E1 (list(car L))) (append E2 (list (cadr L))) (cddr L)))
	)
)
